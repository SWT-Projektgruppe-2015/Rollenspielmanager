package tests.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import model.Gruppe;
import model.Spieler;

import org.junit.Before;
import org.junit.Test;

public class GruppenTest {
    private Gruppe gruppe;
    private Spieler spieler;
    
    @Before
    public void initObjects() {
        gruppe = new Gruppe();
        spieler = new Spieler();
    }
    
    
    
    @Test
    public void addSpielerToGruppeTest() {
        gruppe.addSpieler(spieler);
        assertTrue(spieler.getMembership_().contains(gruppe));
        assertTrue(gruppe.getMembers_().contains(spieler));
        gruppe.removePlayer(spieler);
    }
    
    
    
    @Test
    public void removeSpielerFromGruppeTest() {
        gruppe.addSpieler(spieler);
        gruppe.removePlayer(spieler);
        assertTrue(!spieler.getMembership_().contains(gruppe));
        assertTrue(!gruppe.getMembers_().contains(spieler));
    }
    
    
    
    @Test
    public void deleteSpielerFromDB() {
        gruppe.addToDB();
        spieler.addToDB();
        
        gruppe.addSpieler(spieler);
        spieler.deleteFromDB();
        
        assertTrue(!gruppe.getMembers_().contains(spieler));
        
        gruppe.deleteFromDB();
    }
    
    
    
    @Test
    public void correctOrderWithSamePrefix() {
        Gruppe firstGruppe = new Gruppe();
        firstGruppe.setName_("Abenteuer");
        Gruppe secondGruppe = new Gruppe();
        secondGruppe.setName_("Abenteuer in Cysteron");
        
        assertTrue(firstGruppe.compareTo(secondGruppe) < 0);
    }
    
    
    
    @Test
    public void correctOrderWithDifferentPrefix() {
        Gruppe firstGruppe = new Gruppe();
        firstGruppe.setName_("Abenteuer");
        Gruppe secondGruppe = new Gruppe();
        secondGruppe.setName_("Buben");
        
        assertTrue(firstGruppe.compareTo(secondGruppe) < 0);
    }
    
    
    @Test
    public void getAllTest() {
        gruppe.addToDB();
        List<Gruppe> allGruppen = Gruppe.getAll();
        assertTrue(allGruppen.contains(gruppe));
        gruppe.deleteFromDB();
    }
    
    
    @Test
    public void correctOrderInMemberList() {
        gruppe.addToDB();
        Spieler firstSpieler = new Spieler();
        firstSpieler.setName_("Anna");
        Spieler secondSpieler = new Spieler();
        secondSpieler.setName_("Bert");
        gruppe.addSpieler(secondSpieler);
        gruppe.addSpieler(firstSpieler);
        
        List<Spieler> orderedMembers = gruppe.getOrderedMemberList();
        assertTrue(orderedMembers.get(0) == firstSpieler);
        assertTrue(orderedMembers.get(1) == secondSpieler);
        
        gruppe.deleteFromDB();
    }
    
    
    
    @Test
    public void getStufenSummeTest() {
        Gruppe gruppe = new Gruppe();
        Set<Spieler> spielerListe = generateSomePlayers();
        gruppe.setMembers_(spielerListe);
        int actualStufenSumme = gruppe.getStufenSumme();
        int expected = 78/4;
        assertEquals(expected, actualStufenSumme);
        deletePlayersWithGroup(gruppe);
    }
    
    
    
    @Test
    public void getStufeKreisTest() {
        int kreis = Gruppe.getKreis(13);
        assertEquals(2, kreis);
        kreis = Gruppe.getKreis(26);
        assertEquals(3, kreis);
        kreis = Gruppe.getKreis(36);
        assertEquals(4, kreis);
        int stufe = Gruppe.getStufe(26);
        assertEquals(2, stufe);
    }
    
    
    
    @Test
    public void getBenoetigteErfahrungTest() {
        Gruppe gruppe = new Gruppe();
        Set<Spieler> spielerListe = generateSomePlayers();
        gruppe.setMembers_(spielerListe);
        int stufenSumme = gruppe.getStufenSumme();
        int stufe = Gruppe.getStufe(stufenSumme);
        int kreis = Gruppe.getKreis(stufenSumme);
        int actual = Gruppe.getBenoetigteErfahrung(stufe, kreis);
        int expected = 1650*100;
        assertEquals(expected, actual);
    }
    
    
    
    private void deletePlayersWithGroup(Gruppe gruppe) {
        for(Spieler spieler : gruppe.getMembers_()) {
            spieler.deleteFromDB(); 
        }
        gruppe.deleteFromDB();
    }



    private Set<Spieler> generateSomePlayers(){
        Set<Spieler> spielerListe = new HashSet<Spieler>();
        for(int i = 1; i < 5; ++i){
            Spieler spieler = new Spieler();
            spieler.setKreis_(i);
            spieler.setLevel_(i-1);
            spielerListe.add(spieler);
        }
        return spielerListe;
    }
    
    
}
